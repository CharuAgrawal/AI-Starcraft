use Zergling as knowledge.
use "../GenericMods/GenericPercepts" as module.

module ZerglingEvent {
	%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
	
	% If don't know hatchery position yet, ask the overMind
	if not(bel(hatcheryPosition(_, _))) then (overMind).send?(hatcheryPosition).
	
	% If hatchery position is told, insert it in knowledge base
	if (_).sent:(hatcheryPosition(X, Y)) then insert(hatcheryPosition(X, Y)).
	
	%%%%%%%%%%%%%%% --------------------------------------- Percepts --------------------------------------- %%%%%%%%%%%%%%%
	
	% The generic percepts most units use
	if true then GenericPercepts.
	
	% The handling of the conditions 
	if percept(status(_,_,_,NewCond,_,_)), bel(condition(OldCond), NewCond \= OldCond) then delete(condition(OldCond)) + insert(condition(NewCond)).
	
	% Insert enemy when one is perceived
	forall percept(unit(false, Type,Id,Health,Shields,Conditions)), bel(not(enemy(Type,Id,Health,Shields))) 
	do insert(enemy(Type,Id,Health,Shields)).
	forall bel(enemy(Type, Id, Health, Shields)) , not(percept(unit(false, Type,Id,Health,Shields, Conditions)))
	do delete(enemy(Type,Id,Health, Shields)).	
	
	% The handling of the position 
	if percept(status(_,_,_,_,X1,Y1)), bel(position(X2,Y2), (X1 \= X2 ; Y1 \= Y2)) then delete(position(X2,Y2)) + insert(position(X1,Y1)).
	
	% The handling of the health
	if percept(status(H1,_,_,_,_,_)), bel(hitPoints(H2), H1 \= H2) then delete(hitPoints(H2)) + insert(hitPoints(H1)).
	
	% Perceives enemy base (NOTE: ONLY WORKS ON MAP WITH 2 BASES)
	if bel(not(enemyBase(_, _)), base(X1, Y1, true, _), hatcheryPosition(X, Y), distance(X, Y, X1, Y1, Res), Res > 10) then insert(enemyBase(X1, Y1)) + print("GOT IT").
		
	%%%%%%%%%%%%%%% --------------------------------------- Messaging --------------------------------------- %%%%%%%%%%%%%%%
	
	% If at grouping location, tell the OverMind ready
	if bel(not(ready(_)), position(X1, Y1), groupLocation(X2, Y2), distance(X1, Y1, X2, Y2, D), D < 10,
	self(Id, _)) then (overMind).send(ready(Id)) + insert(ready(Id)).
	
	% If told to attack insert it to the knowledge base
	if (_).sent(attack) then insert(attack).
		
	%%%%%%%%%%%%%%% ----------------------------------------- GOALS ---------------------------------------- %%%%%%%%%%%%%%%
	
	% If not at the groupLocation yet, insert it to knowledge base and adopt goal to go there
	if bel(not(groupLocation(X, Y)), chokepoint(X, Y), enemyBase(X1, Y1), distance(X, Y, X1, Y1, D), D < 30, D > 10) 
	then insert(groupLocation(X, Y)) + adopt(attack(X, Y)).
	
	% If bel to attack then adopt goal to attack enemy base
	if not(goal(attack(X, Y))), bel(attack, enemyBase(X, Y)) then adopt(attack(X, Y)).
}